#!/usr/bin/env python
 
import roslib
import rospy
import math
import numpy
import tf
import tf.transformations as tft
import geometry_msgs.msg
from gazebo_msgs.srv import GetModelState
from gazebo_msgs.msg import ModelState
#from gazebo_msgs.msg import GetModelState
from gazebo_msgs.srv import GetModelStateRequest
from geometry_msgs.msg import Pose
from geometry_msgs.msg import PoseStamped
#from gazebo_msgs.msg import *
#import gazebo_msg.srv
 
if __name__ == '__main__':
    rospy.init_node('board_pose')

    listener = tf.TransformListener()
    get_state_service = rospy.ServiceProxy('/gazebo/get_model_state', GetModelState)
    rate = rospy.Rate(50.0)
    while not rospy.is_shutdown():
        rospy.wait_for_service('/gazebo/get_model_state')
        msrv = get_state_service("Apriltag7", "Apriltag0")
        modelstate = msrv
        diffmatrix = tft.quaternion_matrix(numpy.array([modelstate.pose.orientation.x, modelstate.pose.orientation.y, modelstate.pose.orientation.z, modelstate.pose.orientation.w]))
        diffmatrix[0,3] = modelstate.pose.position.x
        diffmatrix[1,3] = modelstate.pose.position.y
        diffmatrix[2,3] = modelstate.pose.position.z

        print('T = ',diffmatrix)

        T = diffmatrix
        R=T[:3,:3].transpose()
        t = numpy.array([[-T[0,3]], [-T[1,3]], [-T[2,3]]])
        t = R.dot(t)
        T[:3,:3] =R
        T[:3,3] = t.transpose()
        print('T.inverse = ',T)

        rate.sleep()
